name: CD Pipeline

on:
  push:
    branches:
      - master # Trigger on pushes to the 'master' branch for production deployment

env:
  AWS_REGION: eu-central-1 # Default AWS region for the deployment. Consider making this a secret if it varies.

jobs:
  build-and-push-image:
    name: Build and Push Airflow Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: . # Build context is the root of the repository
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max # Store build cache

    outputs:
      # Output the full ECR image URI for the next job
      image_uri: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

  deploy-infrastructure:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: build-and-push-image # This job depends on the Docker image being built and pushed
    environment: production # Use GitHub Environments for protection rules and environment-specific secrets
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0 # Specify a compatible Terraform version

      - name: Terraform Init
        run: terraform init
        working-directory: terraform # Navigate to the directory containing your Terraform files

      - name: Terraform Plan
        # Generate a plan and save it to a file for the apply step.
        # Pass the newly built Docker image URI and other required variables.
        run: terraform plan -no-color -input=false -out=tfplan -var "airflow_docker_image=${{ needs.build-and-push-image.outputs.image_uri }}"
        working-directory: terraform
        env:
          # Pass all required Terraform variables as environment variables.
          # These should be configured as GitHub Secrets in your repository settings.
          TF_VAR_project_name: volka-games-de # Example project name, defined in main.tf
          TF_VAR_vpc_id: ${{ secrets.TF_VAR_VPC_ID }}
          TF_VAR_private_subnet_ids: ${{ secrets.TF_VAR_PRIVATE_SUBNET_IDS }} # e.g., "subnet-xxxx,subnet-yyyy"
          TF_VAR_public_subnet_ids: ${{ secrets.TF_VAR_PUBLIC_SUBNET_IDS }}   # e.g., "subnet-aaaa,subnet-bbbb"
          TF_VAR_etl_task_role_arn: ${{ secrets.TF_VAR_ETL_TASK_ROLE_ARN }}
          TF_VAR_db_instance_endpoint: ${{ secrets.TF_VAR_DB_INSTANCE_ENDPOINT }}
          TF_VAR_db_instance_port: ${{ secrets.TF_VAR_DB_INSTANCE_PORT }}
          TF_VAR_db_security_group_id: ${{ secrets.TF_VAR_DB_SECURITY_GROUP_ID }}
          TF_VAR_db_name: ${{ secrets.TF_VAR_DB_NAME }}
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password_secret_arn: ${{ secrets.TF_VAR_DB_PASSWORD_SECRET_ARN }}
          TF_VAR_api_key_secret_name: ${{ secrets.TF_VAR_API_KEY_SECRET_NAME }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }} # Pass region as a variable if defined in main.tf
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}

      - name: Terraform Apply
        # Apply the plan only on pushes to the master branch.
        # This ensures that the infrastructure is updated automatically after a successful build.
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan # Use the plan generated in the previous step
        working-directory: terraform
        env:
          # Re-pass variables for apply, or ensure they are part of the saved plan (tfplan)
          # It's good practice to re-pass them to be explicit, especially for sensitive ones.
          TF_VAR_project_name: volka-games-de
          TF_VAR_vpc_id: ${{ secrets.TF_VAR_VPC_ID }}
          TF_VAR_private_subnet_ids: ${{ secrets.TF_VAR_PRIVATE_SUBNET_IDS }}
          TF_VAR_public_subnet_ids: ${{ secrets.TF_VAR_PUBLIC_SUBNET_IDS }}
          TF_VAR_etl_task_role_arn: ${{ secrets.TF_VAR_ETL_TASK_ROLE_ARN }}
          TF_VAR_db_instance_endpoint: ${{ secrets.TF_VAR_DB_INSTANCE_ENDPOINT }}
          TF_VAR_db_instance_port: ${{ secrets.TF_VAR_DB_INSTANCE_PORT }}
          TF_VAR_db_security_group_id: ${{ secrets.TF_VAR_DB_SECURITY_GROUP_ID }}
          TF_VAR_db_name: ${{ secrets.TF_VAR_DB_NAME }}
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password_secret_arn: ${{ secrets.TF_VAR_DB_PASSWORD_SECRET_ARN }}
          TF_VAR_api_key_secret_name: ${{ secrets.TF_VAR_API_KEY_SECRET_NAME }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}